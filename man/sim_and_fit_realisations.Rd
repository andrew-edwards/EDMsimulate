% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_and_fit_realisations.R
\name{sim_and_fit_realisations}
\alias{sim_and_fit_realisations}
\title{Simulation of multiple realisaztions of Larkin population dynamics 
model with estimation}
\usage{
sim_and_fit_realisations(
  salmon_sim_args = list(),
  pbsEDM_args = list(lags = list(R_prime_t = 0, S_t = 0:3), first_difference = TRUE,
    centre_and_scale = TRUE),
  larkin_args = list(run_stan = TRUE, prior_mean_alpha = 2, prior_mean_beta = -rep(1, 4),
    prior_mean_sigma = 0.5, prior_sd_alpha = 0.5, prior_sd_beta = rep(0.25, 4),
    prior_sd_sigma = 0.25),
  ricker_args = list(run_stan = TRUE, prior_mean_alpha = 2, prior_mean_beta = -1,
    prior_mean_sigma = 0.5, prior_sd_alpha = 0.5, prior_sd_beta = 0.25, prior_sd_sigma =
    0.25),
  M = 10
)
}
\arguments{
\item{salmon_sim_args}{List of arguments to pass onto `salmon_sim()`,
including `T` for the final time step. TODO make p_prime standalone}

\item{pbsEDM_args}{List of arguments to pass onto `pbsEDM::pbsEDM()`. Note
that `lags` has no default, so needs to be specified here, and that `R_prime_t`
has to be the first one (with a lag of zero, so `R_prime_t = 0` or `R_prime_t = 0:1`
etc.) to be the response variable. Note that the default list here is just
to run examples, and if the list is different then `first_difference` and
`centre_and_scale` need to be explicictly specified in the new list (since
their defaults in `pbsEDM()` are FALSE, not TRUE like here.}

\item{larkin_args}{List of arguments to pass onto `larkin::forecast()`.}

\item{ricker_args}{List of arguments to pass onto `larkin::forecast()`.}

\item{M}{number of realisations}

\item{T}{Explicit `T` because we need a default; this gets overwritten by
any `T` in `salmon_sim_args`.}
}
\value{
Tibble with row `m` corresponding to realisation `m` and giving
the simulated recruitment from year-T spawners, `R_prime_T_sim`, and fitted recruitment `R_prime_T_edm_fit` for
  year `T`, followed by the values reported in the `results`
  object in output from `pbsEDM:pbsEDM()`, namely `E N_rho N_rmse X_rho
  X_rmse` (exact columns may change in future). Probably won't need all
  those, but save them for now as good for understanding.
}
\description{
Simulate a population and fit it using pbsEDM::pbsEDM(), 
doing multiple realisations for a given set of parameters (so the only 
difference is the stochasticity)

This only returns the simulated recruitment `R_prime_T_sim` for the final time step, the
forecasted `R_prime_T_edm_fit` calculated using EDM (obviously taking `R_prime_T_sim`
out of the input to `pbsEDM::pbsEDM()`, and the EDM summary results. Use
`sim_and_fit()` with a particular seed to get full results for any
specific realisation. The seed for each simulated data set is given by
`set.seed(m)` where `m` is the simulation number, going from 1 to `M`.
}
\examples{
\dontrun{
TODO res <- sim_and_fit(pbsEDM_args = list(lags = list(R_prime_t = 0,
                                                  S_t = 0:3),
                                      first_difference = TRUE))
res$fit$results$X_rho
# Think of year 80 as being 2019ish, not 2023.
}
}
\author{
Andrew Edwards
}
